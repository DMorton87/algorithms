Overview

* Divide and Conquer algorithm
 - Breaks down problem into multiple subproblems recursively until they become simple to solve. 
 - Solutions are combined to solve original problem.

* Running time
 - O(n^2) worst case
 - O(n * log(n)) best and average case

* Worst case scenario explaination:
 QuickSort's efficiency lies in its ability to partition data around a pivot, which ideally splits the data into two
  roughly equal halves. From there, QuickSort can recursively sort the halves. 
  Each partition operation is O(n), and if we halve the data each time, we have log(n) partition operations,
   making the overall time complexity O(n log(n)).

 However, if the data is already sorted, and if we are choosing the pivot poorly 
 (like choosing the first or last element as pivot), QuickSort doesn't split the list into two halves.
 Instead, one partition has all the elements except the pivot, and the other partition is empty. 
 This gives us a situation where we have n partition operations, making the total time complexity O(n^2).
 Technically, it would still "split" the list, but one of the partitions would indeed be empty.
 This pattern would continue for every recursive call of QuickSort on the non-empty partition, 
 each time selecting the largest remaining number as the pivot, and creating an empty partition. 
 This inefficient partitioning leads to the worst-case time complexity of O(n^2).

* Fixing quick_sorts Big O
 Random Approach
  The random approach is easy to code, works practically all of the time, and as such is often used.
  The idea is to quickly shuffle the list before sorting it. The likelihood of shuffling into a sorted list
  is astronomically unlikely, and is also more unlikely the larger the input.
 Median Approach
  One of the most popular solutions is to use the "median of three" approach. Three elements 
  (for example: the first, middle, and last elements) of each partition are chosen and the median is found between them.
  That item is then used as the pivot.
  This approach has the advantage that it can't break down to O(n^2) time because we are guaranteed to never
  use the worst item in the partition as the pivot. That said, it can still be slower because a true median isn't used.

General Principle

* Quicksort
1. The quick_sort function is called and it's parameters are: the list to be sorted, the lowest index and the highest index.
    1a. if low is greater than than high then the list is either empty or only contains one value and the list is already sorted.
2. If low is less than high, then it can be sorted.
    2a. Call the partition function on the list and set a variable that captures the value returned by partition.
    2b. Call quick_sort recursively on both sides of the list that has been divided into sub arrays by the partition function.
     We know where to split the list based on the values returned by the partition function in 3a.
3. Return the sorted list.

Partition:

1. The partition function is called and takes the same parameters as quick_sort.
2. initialize the pivot variable as the element at the highest index of the list.
3. initialize the i variable as the the parameter "low".
4. j is initialized by a for loop and told to move through the list from the parameters low to high.
    4a. As j moves through the list, if the element it falls on is smaller then the pivot...
    4b. the element at i and the element at j will swap places...
    4c. and the position of i will increment by one.
5. Once the first round of sorting is complete the elements at i and high will swap places.
    (j has already moved through the list, swapping with i until all the values to the left of i are smaller than the pivot,
    and all the values to the right are larger) 
6. Finally, the function will return i, which the quick_sort function will then use 
    to divide the list further into sub arrays if there is still sorting to be done.